{% extends "_templates/base.html" %}
{% set page_title = "Methods" %}

{% block title %}Methods - Fine Uploader Documentation{% endblock %}

{% block sidebar %}
<ul class="nav nav-tabs nav-stacked">
    <li><a href="#core"><b>Core</b></a></li>
    <li><a href="#ui"><b>UI</b></a></li>
</ul>
{% endblock %}

{% block content %}
{% markdown %}
# Methods <small>Traditional</small> {: .page-header }

## Core

{{ methods_table(
    (
        ("addFiles", "filesOrInputs[, params[, endpoint]]", "", "Submit one or more `File` objects to the uploader. Accepts `File`s, `<input>` elements, or a collection of any of those two types."),
        ("addBlobs", "blobDataArray[, params[, endpoint]]", "", "Submit one or more `Blob` or `BlobData` objects to the uploader. See below for a spec of a `BlobData` object."),
        ("cancel", "`Integer` id", "", "Cancel the queued or currently uploading item with the corresponding id"),
        ("cancelAll", "", "", "Cancel all queued or currently uploading items"),
        ("clearStoredFiles", "", "", "Clears the internal list of stored items. Only applies with `autoUpload` is `false`"),
        ("deleteFile", "`Integer` id", "", "Delete the file with the corresponding id off the server"),
        ("deleteFile", "`Integer` id", "", "Delete the file with the corresponding id off the server"),
        ("drawThumbnail", "`Integer` id, `<img>` or `<canvas>` targetContainer[, `Integer` maxSize][, `Boolean` fromServer]",
        "`qq.Promise`", "Draws a thumbnail.  If you set the `fromServer` parameter to false, or leave it `undefined`,
        a preview will be generated from the `Blob`/`File` provided by the browser.  If client-side preview generation is
        not supported by the browser, or if you specify `true` for the `fromServer` option, a thumbnail based on the
        server `thumbnailUrl` from your server's upload response will be displayed on the `targetContainer`.  You can
        also optionally specify a maximum height/width for the thumbnail.  The returned promise will be fulfilled by
        passing the container back into the success callback after the thumbnail has rendered.  If the thumbnail
        cannot be generated, failure callbacks will be invoked instead, passing the container and an error message."),
        ("getButton", "`Integer` id", "`HTMLElement`", "Returns the button container element associated with a file,
        or undefined if the file was not submitted via a Fine Uploader controlled upload button."),
        ("getFile", "`Integer` id", "`File` or `Blob`", "Returns the item associated with the id. File API browsers only"),
        ("getInProgress", "", "", "Returns the number of items that are either currently uploading or queued. If called inside of the 'cancel' event handler this method will return a value that includes the upload associated with the 'cancel' event handler. This is because the upload will not be cancelled until the event handler returns."),
        ("getName", "`Integer` id", "`String`", "Returns the name of the item with the associated id"),
        ("getNetUploads", "", "`Number`", "Returns the number of items that have both been successfully uploaded and not deleted."),
        ("getResumableFilesData", "", "`Array`", "Returns the array of potentially resumable items. Each resumable file is represented by an object with the following properties: `name`: filename, `size`: size, `uuid`: unique id, `partIdx`: index of the part where the resume will start from."),
        ("getSize", "`Integer` id", "`String`", "Return the size of the item  with the associated id"),
        ("getUploads", "`Function` [filter]", "`Array`", "Return information about all the items that have been submitted to the uploader. The objects being iterated over will have the following properties: `id`, `uuid`, `originalName`, `name`, `status`, and `size`."),
        ("getUuid", "`Integer` id", "`String`", "Retrieve the UUID of the item with the associated id"),
        ("log", "`String` message", "", "Output a message to the JavaScript console, if possible."),
        ("reset", "", "", "Reset Fine Uploader"),
        ("retry", "`Integer` id", "", "Try uploading a specific item again"),
        ("setEndpoint", "`String` endpointPath[, `Number || HTMLElement ` idOrButton]", "", "Modify the location where
        upload requests should be directed. he endpoint for a specific file or blob can be changed by passing in an
        optional `id` or `button` parameter.  An id will always be a number and refers to a specific file.  A button will
        always be an `HTMLElement` and refers to a specific 'extra' button element contributed via the options."),
        ("setDeleteFileEndpoint", "`String` endpointPath[, `Integer` id]", "", "Modify the location where upload requests should be directed. To change for a specific item pass in a value for the `id` parameter"),
        ("setDeleteFileParams", "`Object` newParams[, `Integer` id]", "", "Set the parameters for the delete request"),
        ("setName", "`Integer` id, `String` newName", "", "Provide an alternative name for the associated item"),
        ("setParams", "`Object` newParams[, `Integer` id]", "", "Set the parameters along with the upload request"),
        ("setUuid", "`Integer` id, `String` newUuid", "", "Set the UUID for the item with the associated id."),
        ("uploadStoredFiles", "", "", "Begin uploading all queued items. `NoFilesError` if there are no items to upload."),
    )
) }}

### `blobData` objects

These are simple JS objects that have the following properties:

```javascript
{
    "name": "", /* The name of the blob */
    "blob", "" /* The value of the bytes of the Blob object being uploaded */
}
```

{{ alert(
"""For more information on `File` and `Blob` objects, see the W3C's
[File Specification](http://www.w3.org/TR/FileAPI/#dfn-file) and
[Blob Specification](http://www.w3.org/TR/FileAPI/#dfn-Blob).""", "info", "Info:") }}

## UI

{{ methods_table(
    (
        ("addExtraDropzone", "`HTMLElement` element", "", "Used to mark an element as a drop zone."),
        ("removeExtraDropzone", "`HTMLElement` element", "", "Used to un-mark an element as a drop zone."),
        ("getItemByFileId", "`Integer` id", "`HTMLElement`", "Returns the element associated with the provided `id`."),
    )
) }}

{% endmarkdown %}
</div>
{% endblock %}
</div>
